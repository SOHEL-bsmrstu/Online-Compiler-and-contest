<!DOCTYPE html>
<html>
    <head>
        <title>Web-site Massage</title>
    </head>

    <body>
        <div style="width: 103%; margin-left: -1%;"><b>
                <?php
                include 'head.php';
                include 'time_controling.php';
                ?>
            </b></div>

        <div style="margin-top: 30px; text-align: center;">
            <h2><i>Web-site Massage</i></h2>
        </div>

        <div style="margin-left: 150px;margin-bottom: 100px; margin-top: 50px; margin-right: 150px; font-size: 22px; border: 1px solid blue; text-align: justify;">
            <p><blockquote style="border: none;">A compiler is a special program that processes statements written in a particular programming language and turns them into machine language or "code" that a computer's processor uses. Typically, a programmer writes language statements in a language such as Pascal or C one line at a time using an editor. The file that is created contains what are called the source statements. The programmer then runs the appropriate language compiler, specifying the name of the file that contains the source statements. <b style="color: blue;">Why need online programming?</b> Given bellow the benefits of online programming.</blockquote>
            <blockquote  style="border: none;"><b style="color: green;">1. You can structure your deliberate practice routine around it :</b><br><br>Deliberate practice begins with the tools of the trade and a source of practice material. Golfers need balls, clubs, and sand traps. Musicians need instruments and sheet music. Programmers need a computer and a description of what to build. While there are other ways to structure deliberate practice for software development, the world of competitive programming is such a convenient source of practice material that it’s hard to ignore. The contest host provides problems, test cases, and community. The practitioner is then free to focus on building good study habits and refining their learning process. Pick a problem, solve it, reflect on how your process worked, repeat.</blockquote>
            <blockquote  style="border: none;"><b style="color: green;">2. It will prepare you well for technical interviews :</b><br><br>The standard coding interview has much in common with a programming competition. They both require solving a clearly-defined programming puzzle, tend to focus on well-known algorithms rather than domain-specific technologies, and reward quick solutions. There are also some differences. In a programming competition, you have access to a computer, while in an interview, you will generally be coding on a whiteboard. Competition problems tend to be harder, especially once you have some experience. And online judges don’t require you to explain why your solution works. But the key point is that experienced competitive programmers will find the coding part of an interview, a dreaded experience for most developers, to be rather straightforward.</blockquote>
            <blockquote  style="border: none;"><b style="color: green;">3. It’s a way to publicly demonstrate your skills :</b><br><br>Competitive programming communities have leaderboards that list competitors’ performance in the contests. A good ranking demonstrates that you can solve problems under pressure, and it shows where you stack up compared to your peers. You don’t have to be at the top of the leaderboard, or even in the top 1000, for your ranking to be beneficial. Most developers don’t have any kind of public record other than their resume, which often contains claims that are hard to verify because they involve non-public work. A competitive programming score, like a history of commits to GitHub projects, is a way to demonstrate that you can actually code, without the need to stand in front of a whiteboard while an interviewer looks over your shoulder. Don’t like the idea of a public profile? Imagine that you’re in the market for a new programming job. If a hiring manager sees a link on your resume to a profile showing steadily increasing programming contest performance, they’ll be a lot more likely to schedule a technical phone screen or bring you in for an interview, since you have already proven that you can do well.</blockquote>
            <blockquote  style="border: none;"><b style="color: green;">4. It’s guaranteed brain exercise :</b><br><br>On any given day, what you’re asked to do at work may or may not be challenging, or you may be exercising one of the many non-technical skills required of software developers. By practicing regularly with competitive programming problems, you can ensure that the coding part of your brain receives a regular workout. It’s like one of those brain training apps, but for real skills.</blockquote>
            <blockquote  style="border: none;"><b style="color: green;">5. It’s fun :</b><br><br>Like joining an amateur sports league to get exercise, participating in programming competitions to get better at programming provides built-in motivation. Keeping an eye on the leaderboards and looking forward to facing off against your peers is a way to encourage consistent practice. Some people take the position that programmers should participate in competitions only for entertainment. I don’t agree with that, but the fun certainly doesn’t hurt.</blockquote>
            <blockquote  style="border: none;"><b style="color: green;">6. It’s a way to practice fast coding :</b><br><br>Most commercial software development work has a deadline, but it’s usually measured in weeks or months. In competitive programming, the deadlines are measured in minutes. This provides a unique perspective on problem-solving and implementation. There isn’t time during a contest to search the Web for answers. You must have language syntax and algorithm knowledge at your fingertips (literally).
                There’s a school of thought that practicing competitive programming will lead to bad habits that programmers will then carry over into their regular work. I suppose it’s possible that a programmer who would otherwise write clean code ends up using short variable names and long functions due to their competitive programming training. But it seems more likely that they already had those habits. Writing a short program in 30 minutes to solve a puzzle is different enough from writing a complete application that it shouldn’t be hard to remember to take more care for code that is going to be maintained over time. And even for work that has to last, there is a benefit to being able to code quickly. Assuming good code quality, a developer who can finish a particular task in a day is more valuable than one who takes two days. In Joel Spolsky’s classic The Guerrilla Guide to Interviewing, he recommends starting the programming part of an interview with a very easy question, while paying attention to how long the candidate takes to solve it. The reason for this test is that “If the basic concepts aren’t so easy that you don’t even have to think about them, you’re not going to get the big concepts.” Competitive programming can help you learn the basic concepts well enough that you don’t have to think about them, which frees you up to think about more complex issues in the system you’re building.</blockquote>
            <blockquote  style="border: none;"><b style="color: green;">7. Competitive programming has an active community :</b><br><br>The idea of using deliberate practice as a process for getting better at software development is not an unknown concept, but it’s also not mainstream advice in the world of programming. So it can be hard to find people who are working on that style of learning. Competitive programming, on the other hand, has an active community on the major contest sites, and it’s easy for beginners to get questions answered on Quora. Just as the gamified nature of competitive programming encourages participants to keep coming back, having a community to hang out with can encourage sticking with what might otherwise be a solitary deliberate practice effort.</blockquote></p>
        <blockquote  style="border: none;"><b style="color: green;">8. Bite-sized programs are convenient to work on :</b><br><br>For various reasons, you may not have time to contribute to a full software system. Maybe you finally got that management offer you couldn’t refuse, or you have some other non-programming day job that keeps you busy. Working your way through a list of self-contained programming problems is less of a commitment than contributing to an open-source project or starting your own, but it’s a way to keep programming.</blockquote></p>
    <blockquote  style="border: none;"><b style="color: green;">9. Reading (code) is educational :</b><br><br>Many competitive programming sites let you look at the other contestants’ code once the contest is over. And for those that don’t, developers often post their code on blogs and GitHub. This is a good opportunity to see how other developers approached the same problems that you just solved. (Make sure to solve them yourself first). In the real world, it’s rare that two developers will each implement a solution to an identical problem. In a programming competition, a group of talented programmers do this all the time.</blockquote></p>
<blockquote  style="border: none;"><b style="color: green;">Remembering the Goal</b><br><br>We know of one competitive programmer whose full-time job is writing contest editorials. (He also has a good post in which he responds to critics of coding contests). On TopCoder, experienced competitors can make a bit of money by winning contests. For the rest of us, winning competitions is not the goal. The purpose of getting better at competitive programming is to improve your fundamental programming skills. That’s what will give you the chance to work on the most interesting projects, because you’ll be able to solve problems that other developers aren’t prepared for.</blockquote></p></p>

</div>

<?php include 'foot.php'; ?>
</body>
</html>

